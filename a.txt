import os
os.environ["GOOGLE_API_KEY"] = ""
#---------------------------------------------------------
import pyodbc
# Function to connect to SQL Server and get the schema (tables and columns)
from sqlalchemy import create_engine, inspect
#------------------ Database Connectoin -----------------------
def get_database_schema(driver, server, database, username=None, password=None, trusted_connection=True):
    """
    Connect to a SQL database dynamically using server & database details.
    Supports both Windows and SQL authentication.
    """
    # Build connection string based on auth type
    if trusted_connection:
        conn_str = f"mssql+pyodbc://{server}/{database}?driver={driver}&trusted_connection=yes"
    else:
        conn_str = f"mssql+pyodbc://{username}:{password}@{server}/{database}?driver={driver}"

    try:
        engine = create_engine(conn_str)
        inspector = inspect(engine)

        schema = {}
        for table in inspector.get_table_names():
            columns = inspector.get_columns(table)
            schema[table] = [col['name'] for col in columns]
        
        return schema

    except Exception as e:
        print("Connection error:", e)
        return {}
#----------Cashing after first prompt---------------
# from functools import lru_cache

# @lru_cache(maxsize=1)
# def get_cached_schema(...):
#     return get_database_schema(...)

#------------------------------------------------------------------------------------
#----------------- Create Prompt -------------------------
from langchain.prompts import PromptTemplate

# Create a dynamic prompt using the SQL Server schema
def create_prompt(schema, question):
    schema_str = ""
    for table, columns in schema.items():
        schema_str += f"Table {table} ({', '.join(columns)})\n"

    template = """
    You are a SQL Server (T-SQL) expert. Based on the given schema and natural language question, generate a valid SQL Server query only. 
    Do NOT use backticks or SQLite/PostgreSQL syntax. Avoid wrapping the output in markdown code blocks.
    Schema: {schema}
    Question: {question}
    """
    
    return PromptTemplate(input_variables=["schema", "question"], template=template)

# Generate the prompt with the SQL Server schema and the user query
schema = get_database_schema(driver='ODBC+Driver+17+for+SQL+Server',server='DESKTOP-H5I2TGD\\SQLEXPRESS',database='BankDB')
question = "What are all the types of products we offer?"



prompt = create_prompt(schema, question)

#------------------------------------------------------------------------------------

from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains import LLMChain

# Initialize Google Gemini model via LangChain
llm = ChatGoogleGenerativeAI(model="models/gemini-2.0-flash", temperature=0)

# Initialize LLMChain with the prompt and model
chain = LLMChain(llm=llm, prompt=prompt)

# Generate SQL query
sql_raw_query = chain.run({"schema": schema, "question": question})
# sql_query = chain.run({"schema": schema, "question": question})
# sql_query = sql_raw_query.strip().strip("`").replace("```sql", "").replace("```", "").strip()
import re

def clean_sql_query(query):
    # Remove code blocks like ```sql ... ``` or plain ```
    return re.sub(r"```(?:sql)?|```", "", query).strip(" `\n")

sql_query = clean_sql_query(sql_raw_query)
#
if not sql_query.strip().lower().startswith(("select", "insert", "update", "delete")):
    print("Warning: Generated SQL might be invalid or incomplete.")
#
print(f"Generated SQL Query: {sql_query}")

#-----------------------------------------------------------------------------
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

def validate_sql(sql_query, db_url):
    """
    Validates and executes a SQL query across different SQL databases using SQLAlchemy.
    
    Args:
        sql_query (str): The SQL query to run.
        db_url (str): SQLAlchemy-compatible database URL.

    Example db_url values:
        - SQL Server: mssql+pyodbc://localhost/BankDB?driver=ODBC+Driver+17+for+SQL+Server&trusted_connection=yes
        - MySQL: mysql+pymysql://user:password@localhost/BankDB
        - PostgreSQL: postgresql+psycopg2://user:password@localhost/BankDB
        - SQLite: sqlite:///path/to/database.db
    """
    try: 
        engine = create_engine(db_url)
        with engine.connect() as conn:
            result = conn.execute(text(sql_query))
            if sql_query.strip().lower().startswith("select"):
                rows = result.fetchall()
                print("SQL executed successfully. Result:", rows)
            else:
                print("SQL executed successfully (non-select query).")
    except SQLAlchemyError as e:
        print(f"SQLAlchemy Error: {e}")

db_str = "mssql+pyodbc://@DESKTOP-H5I2TGD\SQLEXPRESS/BankDB?driver=ODBC+Driver+17+for+SQL+Server&Trusted_Connection=yes"
validate_sql(sql_query,db_str)
#########################
import logging
logging.basicConfig(filename="queries.log", level=logging.INFO)

logging.info(f"Question: {question}")
logging.info(f"Generated SQL: {sql_query}")

